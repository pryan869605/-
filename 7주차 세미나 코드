#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};


struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


struct Node* insert(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value); 
    }
    if (value < root->data) {
        root->left = insert(root->left, value); 
    } else if (value > root->data) {
        root->right = insert(root->right, value); 
    }
    return root;
}


int search(struct Node* root, int value) {
    if (root == NULL) {
        return 0; 
    }
    if (root->data == value) {
        return 1; 
    } else if (value < root->data) {
        return search(root->left, value); 
    } else {
        return search(root->right, value); 
    }
}


void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left); 
        printf("%d ", root->data);    
        inorderTraversal(root->right); 
    }
}

int main() {
    struct Node* root = NULL;

    
    root = insert(root, 10);
    insert(root, 5);
    insert(root, 15);
    insert(root, 3);
    insert(root, 7);

    
    
    inorderTraversal(root);
    printf("\n");

    
    int target = 7;
    if (search(root, target)) {
        printf("Value %d found in the tree.\n", target);
    } else {
        printf("Value %d not found in the tree.\n", target);
    }

    return 0;
}
